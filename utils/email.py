import asyncio
import logging
import smtplib
import ssl
from email.message import EmailMessage
from functools import partial
from typing import Tuple, Optional

from config import SMTP_SERVER, SMTP_PORT, SMTP_EMAIL, SMTP_PASSWORD

logger = logging.getLogger(__name__)


async def send_course_access_email(
        to: str,
        access_code: str,
        bot_link: str
) -> Tuple[bool, Optional[str]]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É"""
    subject = "–î–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É ¬´–õ–∞–≥—ñ–¥–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞¬ª"

    plain_text = f"""–í—ñ—Ç–∞—î–º–æ –≤–∞—Å! 

–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å ¬´–õ–∞–≥—ñ–¥–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞¬ª.
–¢–µ–ø–µ—Ä —É –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —ñ –ø—Ä–∞–∫—Ç–∏–∫, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –º'—è–∫–æ, –∞–ª–µ –≤–ø–µ–≤–Ω–µ–Ω–æ –≤–∏–±—É–¥–æ–≤—É–≤–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —ñ –Ω–æ–≤—ñ –∑–≤–∏—á–∫–∏ —É –≤–ª–∞—Å–Ω–æ–º—É –∂–∏—Ç—Ç—ñ.

üëâ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫—É—Ä—Å—É –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞.
–©–æ–± —É–≤—ñ–π—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ü–µ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É:

{access_code}

{bot_link}

–Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –±—É–¥—å-—è–∫—ñ —Ç—Ä—É–¥–Ω–æ—â—ñ –∑—ñ –≤—Ö–æ–¥–æ–º —á–∏ –¥–æ—Å—Ç—É–ø–æ–º, –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤ –±–æ—Ç—ñ ‚Äî –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ.

–î—è–∫—É—î–º–æ, —â–æ –¥–æ–≤—ñ—Ä—è—î—Ç–µ –Ω–∞–º —Ü–µ–π —à–ª—è—Ö.
–ë–∞–∂–∞—î–º–æ –≤–∞–º –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –π –ª–µ–≥–∫–æ—Å—Ç—ñ —É –ø—Ä–∞–∫—Ç–∏—Ü—ñ –ª–∞–≥—ñ–¥–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ üå±

–ó —Ç–µ–ø–ª–æ–º,
–ö–æ–º–∞–Ω–¥–∞ ¬´–õ–∞–≥—ñ–¥–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞¬ª
"""

    html_content = f"""
<html>
  <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <h2 style="color: #4a90e2;">–í—ñ—Ç–∞—î–º–æ –≤–∞—Å!</h2>
    
    <p>–î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ –∫—É—Ä—Å <strong>¬´–õ–∞–≥—ñ–¥–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞¬ª</strong>.</p>
    
    <p>–¢–µ–ø–µ—Ä —É –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —ñ –ø—Ä–∞–∫—Ç–∏–∫, —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å –º'—è–∫–æ, –∞–ª–µ –≤–ø–µ–≤–Ω–µ–Ω–æ –≤–∏–±—É–¥–æ–≤—É–≤–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —ñ –Ω–æ–≤—ñ –∑–≤–∏—á–∫–∏ —É –≤–ª–∞—Å–Ω–æ–º—É –∂–∏—Ç—Ç—ñ.</p>
    
    <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
        <p style="font-size: 16px; margin: 0;">üëâ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫—É—Ä—Å—É –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞.</p>
        <p style="font-size: 16px; margin: 10px 0;">–©–æ–± —É–≤—ñ–π—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ü–µ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É:</p>
        <p style="font-size: 24px; font-weight: bold; color: #4a90e2; text-align: center; margin: 15px 0;">{access_code}</p>
        <p style="text-align: center;">
            <a href="{bot_link}" style="display: inline-block; padding: 12px 24px; background-color: #4a90e2; color: white; text-decoration: none; border-radius: 5px; font-weight: bold;">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –±–æ—Ç–∞</a>
        </p>
    </div>
    
    <p>–Ø–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –±—É–¥—å-—è–∫—ñ —Ç—Ä—É–¥–Ω–æ—â—ñ –∑—ñ –≤—Ö–æ–¥–æ–º —á–∏ –¥–æ—Å—Ç—É–ø–æ–º, –≤–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤ –±–æ—Ç—ñ ‚Äî –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ.</p>
    
    <p>–î—è–∫—É—î–º–æ, —â–æ –¥–æ–≤—ñ—Ä—è—î—Ç–µ –Ω–∞–º —Ü–µ–π —à–ª—è—Ö.<br>
    –ë–∞–∂–∞—î–º–æ –≤–∞–º –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –π –ª–µ–≥–∫–æ—Å—Ç—ñ —É –ø—Ä–∞–∫—Ç–∏—Ü—ñ –ª–∞–≥—ñ–¥–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ üå±</p>
    
    <p style="color: #888; font-size: 14px; margin-top: 30px;">–ó —Ç–µ–ø–ª–æ–º,<br>–ö–æ–º–∞–Ω–¥–∞ ¬´–õ–∞–≥—ñ–¥–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞¬ª</p>
  </body>
</html>
"""

    logger.info(f"Sending course access email to {to}")
    return await send_email(to, subject, plain_text, html_content)


async def send_email(
        to: str,
        subject: str,
        plain_text: str,
        html_content: Optional[str] = None
) -> Tuple[bool, Optional[str]]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ Gmail SMTP (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
    
    Args:
        to: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        plain_text: –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (plain text)
        html_content: HTML –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Tuple[bool, Optional[str]]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_event_loop()
    func = partial(_send_email_sync, to, subject, plain_text, html_content)
    return await loop.run_in_executor(None, func)


def _send_email_sync(
        to: str,
        subject: str,
        plain_text: str,
        html_content: Optional[str] = None
) -> Tuple[bool, Optional[str]]:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –ø–∞—Ä–æ–ª—è (Gmail –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    app_password = SMTP_PASSWORD.replace(" ", "")

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ
        msg = EmailMessage()
        msg["Subject"] = subject
        msg["From"] = SMTP_EMAIL
        msg["To"] = to
        msg.set_content(plain_text)

        # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if html_content:
            msg.add_alternative(html_content, subtype="html")

        logger.info(f"Connecting to {SMTP_SERVER}:{SMTP_PORT}...")

        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx = ssl.create_default_context()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ SMTPS (–ø–æ—Ä—Ç 465 —Å SSL)
        with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT, context=ctx) as smtp:
            logger.info("Connected. Logging in...")
            smtp.login(SMTP_EMAIL, app_password)

            logger.info("Logged in. Sending message...")
            smtp.send_message(msg)

            logger.info(f"‚úÖ Email sent successfully to {to}")

        return True, None

    except smtplib.SMTPAuthenticationError as e:
        error = f"Authentication error: {e}. Check that you're using App Password and 2FA is enabled."
        logger.error(error)
        return False, error

    except smtplib.SMTPException as e:
        error = f"SMTP error: {e}"
        logger.error(error, exc_info=True)
        return False, error
        
    except Exception as e:
        error = f"Unexpected error: {e}"
        logger.error(error, exc_info=True)
        return False, error
