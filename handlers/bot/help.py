from typing import Tuple, List, Optional

from aiogram import Router, F
from aiogram.filters import Filter
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, PhotoSize

import keyboards.help as help_kb
from config import ADMIN_CHAT_ID
from keyboards.start import start_menu_keyboard
from outboxes.admin import tickets_menu as admin_tickets_menu
from utils.enums.ticket import TicketStatus
from utils.schemas.ticket import TicketCreateSchemaDB, TicketReadSchemaDB
from utils.services.ticket import get_tickets_by_user_id, create_ticket, close_ticket, open_ticket, get_ticket_by_id

router = Router()


class HelpStates(StatesGroup):
    topic = State()
    message = State()
    admin_responding = State()


class HasOpenTicket(Filter):
    async def __call__(self, message: Message, state: FSMContext) -> bool:
        tickets = await get_tickets_by_user_id(message.from_user.id)
        ticket = await _find_open_ticket(tickets)

        if ticket:
            await state.update_data(open_ticket_id=ticket.id)
            return True

        return False


@router.message(F.text == "Help ‚ùì")
async def start_help_request(message: Message, state: FSMContext) -> None:
    tickets = await get_tickets_by_user_id(message.from_user.id)

    for ticket in tickets:
        if ticket.status != TicketStatus.CLOSED:
            await message.answer(
                f"‚ùå –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Ññ{ticket.id}. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            )
            return

    await message.answer("üí¨ –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:", reply_markup=await help_kb.cancel())
    await state.set_state(HelpStates.topic)


@router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", StateFilter(HelpStates.topic, HelpStates.message))
async def cancel_help_request(message: Message, state: FSMContext) -> None:
    await message.answer(
        "‚ùå –ó–∞–ø–∏—Ç –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=await start_menu_keyboard(message.from_user.id == ADMIN_CHAT_ID)
    )
    await state.clear()


@router.message(F.text, StateFilter(HelpStates.topic))
async def choose_support_topic(message: Message, state: FSMContext) -> None:
    await state.update_data(selected_topic=message.text)

    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ {message.text}.\n"
        "üìù –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —è–∫–æ–º–æ–≥–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ.\n\n"
        "üì∑ –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
    )
    await state.set_state(HelpStates.message)


@router.message(F.text, StateFilter(HelpStates.message))
async def write_help_message_text(message: Message, state: FSMContext) -> None:
    await _process_help_message(message, state, message.text)


@router.message(F.photo, StateFilter(HelpStates.message))
async def write_help_message_photo(message: Message, state: FSMContext) -> None:
    caption = message.caption if message.caption else "–ë–µ–∑ –æ–ø–∏—Å—É"
    await _process_help_message(message, state, message_text=caption, photos=_get_unique_photos(message.photo))


@router.callback_query(F.data.startswith("help:admin_respond_"))
async def admin_respond_to_ticket(callback: CallbackQuery, state: FSMContext) -> None:
    ticket_id, user_id = _get_ntl_last_data(callback)
    ticket = await get_ticket_by_id(ticket_id)

    if ticket.status == TicketStatus.CLOSED:
        await callback.message.answer(
            "‚ùå –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–æ.",
            reply_markup=await help_kb.admin_back_to_tickets()
        )
        await callback.answer()
        return

    await state.update_data(ticket_id=ticket.id, user_id=user_id)

    await callback.message.answer(
        f"üí¨ –í–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ –Ω–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Ññ{ticket_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ {user_id}.\n"
        "‚ùå –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —Çi–∫–µ—Ç–∏–≤.\n\n"
        "üìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
        reply_markup=await help_kb.admin_back_to_tickets()
    )

    await state.set_state(HelpStates.admin_responding)
    await callback.answer()


@router.message(F.text, StateFilter(HelpStates.admin_responding))
async def admin_send_response(message: Message, state: FSMContext) -> None:
    if message.text == "‚ùì –¢i–∫–µ—Ç–∏":
        await state.clear()
        await admin_tickets_menu(message, False)
        return

    data = await state.get_data()

    user_id = data.get("user_id")
    ticket_id = data.get("ticket_id")

    try:
        await message.bot.send_message(
            user_id,
            f"üí¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—é ‚Ññ{ticket_id}:</b>\n\n{message.text}"
        )

        await open_ticket(ticket_id)

        await message.answer(
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—é ‚Ññ{ticket_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –¥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è —Çi–∫–µ—Ç—É.",
            reply_markup=await help_kb.admin_back_to_tickets()
        )

    except Exception as e:
        print(f"Error sending message to help ticket user: {e}")
        await message.answer(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=await help_kb.admin_back_to_tickets()
        )

    await state.clear()


@router.callback_query(F.data.startswith("help:admin_close_"))
async def admin_close_ticket(callback: CallbackQuery) -> None:
    ticket_id, user_id = _get_ntl_last_data(callback)

    try:
        await close_ticket(ticket_id)

        await callback.bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Ññ{ticket_id} –∑–∞–∫—Ä–∏—Ç–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            f"–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –∑–Ω–æ–≤—É!",
            reply_markup=await start_menu_keyboard()
        )

        await callback.message.answer(
            f"‚úÖ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Ññ{ticket_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ.",
            reply_markup=await help_kb.admin_back_to_tickets()
        )

    except Exception as e:
        print(f"Error closing ticket #{ticket_id}: {e}")
        await callback.message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=await help_kb.admin_back_to_tickets()
        )

    await callback.answer()


@router.message(HasOpenTicket(), F.text)
async def user_respond_to_ticket(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        ticket_id = data.get("open_ticket_id")

        ticket = await get_ticket_by_id(ticket_id)

        user = message.from_user
        username = f"@{user.username}" if user.username else "–ë–µ–∑ Username"

        support_message = (
            f"üí¨ <b>–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—é ‚Ññ{ticket.id}</b>\n\n"
            f"üÜî <b>User ID:</b> <code>{user.id}</code>\n"
            f"üë§ <b>Username:</b> {username}\n\n"
            f"üí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{message.text}"
        )

        await message.bot.send_message(
            ADMIN_CHAT_ID, support_message,
            reply_markup=await help_kb.admin_choose_ticket_action(user.id, ticket.id)
        )

        await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    except Exception as e:
        print(f"Error sending user response to admin: {e}")
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@router.message(HasOpenTicket(), F.photo)
async def user_respond_to_ticket_with_photo(message: Message, state: FSMContext) -> None:
    try:
        data = await state.get_data()
        ticket_id = data.get("open_ticket_id")

        ticket = await get_ticket_by_id(ticket_id)

        user = message.from_user
        username = f"@{user.username}" if user.username else "–ë–µ–∑ Username"

        caption = message.caption if message.caption else "–ë–µ–∑ –æ–ø–∏—Å—É"

        support_message = (
            f"üí¨ <b>–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—é ‚Ññ{ticket.id}</b>\n\n"
            f"üÜî <b>User ID:</b> <code>{message.from_user.id}</code>\n"
            f"üë§ <b>Username:</b> {username}\n\n"
            f"üí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{caption}"
        )

        unique_photos = _get_unique_photos(message.photo)

        if len(unique_photos) == 1:
            await message.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=unique_photos[0].file_id,
                caption=support_message,
                reply_markup=await help_kb.admin_choose_ticket_action(message.from_user.id, ticket.id)
            )

        else:
            media_group: List[InputMediaPhoto] = []

            for idx, photo in enumerate(unique_photos):
                if idx == 0:
                    media_group.append(InputMediaPhoto(
                        media=photo.file_id,
                        caption=support_message
                    ))
                else:
                    media_group.append(InputMediaPhoto(media=photo.file_id))

            await message.bot.send_media_group(
                chat_id=ADMIN_CHAT_ID,
                media=media_group
            )

            await message.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text="üîß –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=await help_kb.admin_choose_ticket_action(message.from_user.id, ticket.id)
            )

        await message.answer("‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    except Exception as e:
        print(f"Error sending user response with photo to admin: {e}")
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


async def _find_open_ticket(tickets: List[TicketReadSchemaDB]) -> Optional[TicketReadSchemaDB]:
    return next((t for t in tickets if t.status == TicketStatus.OPEN), None)


async def _process_help_message(message: Message, state: FSMContext, message_text: str, photos=None) -> None:
    data = await state.get_data()
    selected_topic = data.get("selected_topic", "–ë–µ–∑ —Ç–µ–º–∏")

    user = message.from_user
    username = f"@{user.username}" if user.username else "–ë–µ–∑ Username"

    if not message_text.strip():
        message_text = "–ë–µ–∑ –æ–ø–∏—Å—É"

    unique_photos = _get_unique_photos(photos)

    attachment_files = [photo.file_id for photo in unique_photos] if unique_photos else []
    attachments = ",".join(attachment_files) if attachment_files else None

    ticket = await create_ticket(TicketCreateSchemaDB(
        user_id=user.id,
        topic=selected_topic,
        text=message_text,
        attachments=attachments
    ))

    support_message = (
        f"üÜò <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Ññ{ticket.id} –≤i–¥ {username}</b>\n\n"
        f"üÜî <b>User ID:</b> <code>{user.id}</code>\n"
        f"üìã <b>–¢–µ–º–∞:</b> {selected_topic}\n\n"
        f"üí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{message_text}"
    )

    if unique_photos:
        support_message += f"\n\nüì∑ <b>–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ.</b>"

    try:
        if unique_photos:
            if len(unique_photos) == 1:
                await message.bot.send_photo(
                    chat_id=ADMIN_CHAT_ID,
                    photo=unique_photos[0].file_id,
                    caption=support_message,
                    reply_markup=await help_kb.admin_choose_ticket_action(user.id, ticket.id)
                )
            else:
                media_group: List[InputMediaPhoto] = []

                for idx, photo in enumerate(unique_photos):
                    if idx == 0:
                        media_group.append(InputMediaPhoto(
                            media=photo.file_id, caption=support_message
                        ))
                    else:
                        media_group.append(InputMediaPhoto(
                            media=photo.file_id
                        ))

                await message.bot.send_media_group(
                    chat_id=ADMIN_CHAT_ID,
                    media=media_group
                )

                await message.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text="üîß –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                    reply_markup=await help_kb.admin_choose_ticket_action(user.id, ticket.id)
                )

        else:
            await message.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=support_message,
                reply_markup=await help_kb.admin_choose_ticket_action(user.id, ticket.id)
            )

        await message.answer(
            f"‚úÖ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Ññ{ticket.id} –æ—Ç—Ä–∏–º–∞–Ω–æ.\n"
            "‚è≥ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ü—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è.\n\n"
            "üïê –í—ñ–¥–ø–æ–≤—ñ–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω (10:00‚Äì18:00 –∑–∞ –ö–∏—î–≤–æ–º)",
            reply_markup=await start_menu_keyboard()
        )

    except Exception as e:
        print(f"Error sending help ticket message to admin: {e}")
        await message.answer(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=await start_menu_keyboard()
        )

    await state.clear()


def _get_unique_photos(photos: List[PhotoSize]) -> List[PhotoSize]:
    unique_photos: List[PhotoSize] = []

    if photos:
        seen_file_ids = set()

        for photo in photos:
            if photo.file_id not in seen_file_ids:
                seen_file_ids.add(photo.file_id)
                unique_photos.append(photo)

    return unique_photos


def _get_ntl_last_data(callback: CallbackQuery) -> Tuple[int, int]:
    parts = callback.data.split("_")
    return int(parts[-2]), int(parts[-1])
