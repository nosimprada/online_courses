import random
from typing import Dict

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

import keyboards.help as help_kb
from config import ADMIN_CHAT_ID

router = Router()


class HelpStates(StatesGroup):
    choosing_topic = State()
    writing_message = State()


@router.callback_query(F.data == "help:start")
async def start_help_request(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", reply_markup=help_kb.choose_support_topic())
    await state.set_state(HelpStates.choosing_topic)
    await callback.answer()


@router.callback_query(F.data.startswith("help:support_topic_"), StateFilter(HelpStates.choosing_topic))
async def choose_support_topic(callback: CallbackQuery, state: FSMContext) -> None:
    topics_names_: Dict[str, str] = {
        "help:support_topic_1": "–¢–µ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Ññ1",
        "help:support_topic_2": "–¢–µ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Ññ2",
        "help:support_topic_3": "–¢–µ–º–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Ññ3"
    }

    topic_id = callback.data.split("_")[-1]
    topic_name = topics_names_[callback.data]
    await state.update_data(selected_topic_id=topic_id, selected_topic_name=topic_name)

    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ {topic_name}.\n"
        f"–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —è–∫–æ–º–æ–≥–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ.\n\n"
        f"üì∑ –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
    )
    await state.set_state(HelpStates.writing_message)

    await callback.answer()


@router.callback_query(F.data == "help:cancel", StateFilter(HelpStates.choosing_topic))
async def cancel_help_request(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.answer("‚ùå –ó–∞–ø–∏—Ç –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.answer()


@router.message(F.text, StateFilter(HelpStates.writing_message))
async def write_help_message_text(message: Message, state: FSMContext):
    await _process_help_message(message, state, message_text=message.text)


@router.message(F.photo, StateFilter(HelpStates.writing_message))
async def write_help_message_photo(message: Message, state: FSMContext):
    caption = message.caption if message.caption else "–ë–µ–∑ –æ–ø–∏—Å—É"

    await _process_help_message(message, state, message_text=caption, photo=message.photo[-1].file_id)


async def _process_help_message(message: Message, state: FSMContext, message_text: str, photo=None) -> None:
    data = await state.get_data()

    selected_topic = data.get('selected_topic_name')
    if not selected_topic:
        await state.set_state(HelpStates.choosing_topic)
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", reply_markup=help_kb.choose_support_topic())
        return

    user = message.from_user
    username = f"@{user.username}" if user.username else "–ë–µ–∑ Username"
    support_number = random.randint(5000, 8000000)

    support_message = (
        f"üÜò <b>–ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è #{support_number} –≤i–¥ {username}</b>\n\n"
        f"üÜî <b>User ID:</b> <code>{user.id}</code>\n"
        f"üìã <b>–¢–µ–º–∞:</b> {selected_topic}\n\n"
        f"üí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{message_text}"
    )

    if photo:
        support_message += "\n\nüì∑ <b>–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ</b>"

    try:
        if photo:
            await message.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=photo,
                caption=support_message,
                parse_mode="HTML",
                reply_markup=help_kb.choose_message_action_for_helpers(user.username)
            )
        else:
            await message.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=support_message,
                parse_mode="HTML",
                reply_markup=help_kb.choose_message_action_for_helpers(user.username)
            )

        await message.answer(
            f"–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Ññ{support_number} –æ—Ç—Ä–∏–º–∞–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω (10:00‚Äì18:00 –∑–∞ –ö–∏—î–≤–æ–º)")
    except Exception as e:
        print(f"Error sending message to support group: {e}")
        await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    await state.clear()
