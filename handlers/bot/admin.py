from datetime import datetime, timedelta
from typing import List, Tuple

from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InputMediaDocument, InputMediaVideo

import keyboards.admin as admin_kb
from utils.enums.order import OrderStatus
from utils.enums.subscription import SubscriptionStatus
from utils.schemas.lesson import LessonCreateSchemaDB, LessonUpdateSchemaDB, LessonReadSchemaDB
from utils.schemas.order import OrderCreateSchemaDB
from utils.schemas.subscription import SubscriptionReadSchemaDB, SubscriptionCreateSchemaDB
from utils.services.lesson import get_all_modules_with_lesson_count, get_lessons_by_module, create_lesson, \
    get_lesson_by_module_and_lesson_number, delete_lesson, get_lesson_by_id
from utils.services.lesson import update_lesson
from utils.services.order import get_orders_by_tg_id, create_order
from utils.services.subscription import get_subscriptions_by_tg_id, get_active_subscriptions, \
    close_subscriptions_access, open_subscriptions_access, create_subscription
from utils.services.user import get_all_users, get_user_by_tg_id

router = Router()


# class SetUserEmailState(StatesGroup):
#     email = State()


class GrantSubscriptionState(StatesGroup):
    access_to = State()


class CreateLessonState(StatesGroup):
    title = State()
    video = State()
    pdf = State()


class UpdateLessonTitle(StatesGroup):
    title = State()


class UpdateLessonVideo(StatesGroup):
    video = State()


class UpdateLessonPDF(StatesGroup):
    pdf = State()


@router.callback_query(F.data.startswith("admin:show_user_orders_"))
async def show_user_orders(callback: CallbackQuery) -> None:
    user_id = int(callback.data.split("_")[-1])

    orders = await get_orders_by_tg_id(user_id)
    if not orders:
        await callback.message.edit_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.", reply_markup=admin_kb.back_to_admin())
        await callback.answer()
        return

    msg = f"\n<i>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}):</i>\n\n"

    for order in orders:
        msg += f"üì¶ <b>ID:</b> <code>{order.id}</code>\n"
        msg += f"üí∞ <b>–°—É–º–∞:</b> <code>{order.amount}</code>\n"
        msg += f"üîî <b>–°—Ç–∞—Ç—É—Å:</b> <code>{order.status}</code>\n"
        msg += f"‚åö <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> <code>{_normalize_date(order.created_at)}</code>\n"
        msg += f"üí∏ <b>–°–ø–ª–∞—á–µ–Ω–æ:</b> <code>{_normalize_date(order.paid_at)}</code>\n\n"

    await callback.message.edit_text(msg, reply_markup=admin_kb.back_to_admin_or_user(user_id))
    await callback.answer()


@router.callback_query(F.data.startswith("admin:show_user_subscriptions_"))
async def show_user_subscriptions(callback: CallbackQuery) -> None:
    user_id = int(callback.data.split("_")[-1])

    subscriptions = await get_subscriptions_by_tg_id(user_id)
    if not subscriptions:
        await callback.message.edit_text(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—ñ–≤.",
            reply_markup=admin_kb.show_user_subscriptions(user_id, True)
        )
        await callback.answer()
        return

    msg = f"\n<i>–î–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}):</i>\n\n"

    for subscription in subscriptions:
        msg += f"üéüÔ∏è <b>ID:</b> <code>{subscription.id}</code>\n"
        msg += f"üì¶ <b>ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> <code>{subscription.order_id}</code>\n"
        msg += f"üìÖ <b>–ü–æ—á–∞—Ç–æ–∫ –¥–æ—Å—Ç—É–ø—É:</b> <code>{subscription.access_from}</code>\n"
        msg += f"üìÖ <b>–ö—ñ–Ω–µ—Ü—å –¥–æ—Å—Ç—É–ø—É:</b> <code>{subscription.access_to}</code>\n"
        msg += f"üîî <b>–°—Ç–∞—Ç—É—Å:</b> <code>{subscription.status}</code>\n"
        msg += f"‚åö <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> <code>{_normalize_date(subscription.created_at)}</code>\n\n"

    await callback.message.edit_text(msg, reply_markup=admin_kb.show_user_subscriptions(user_id, False))
    await callback.answer()


@router.callback_query(F.data.startswith("admin:show_user_"))
async def show_user_data(callback: CallbackQuery) -> None:
    user_id = int(callback.data.split("_")[-1])

    user = await get_user_by_tg_id(user_id)
    if not user:
        await callback.message.edit_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=admin_kb.back_to_admin())
        await callback.answer()
        return

    msg = (
        f"üë§ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        f"üÜî <b>User ID:</b> <code>{user.user_id}</code>\n"
    )

    if user.username:
        msg += f"üë§ <b>Username:</b> @{user.username}\n"

    msg += f"üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> <code>{_normalize_date(user.created_at)}</code>\n"

    msg += f"\nüìã –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:"

    await callback.message.edit_text(msg, reply_markup=admin_kb.show_user_data(user_id))
    await callback.answer()


@router.callback_query(F.data == "admin:menu")
async def menu(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=admin_kb.menu())
    await callback.answer()


@router.callback_query(F.data == "admin:show_users")
async def show_users(callback: CallbackQuery) -> None:
    users = await get_all_users()

    await callback.message.edit_text(
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <code>{len(users)}</code>",
        reply_markup=admin_kb.show_users(users)
    )

    await callback.answer()


@router.callback_query(F.data == "admin:show_active_accesses")
async def show_active_accesses(callback: CallbackQuery) -> None:
    active_subscriptions = await get_active_subscriptions()
    if not active_subscriptions:
        await callback.message.edit_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ—Å—Ç—É–ø—ñ–≤.", reply_markup=admin_kb.back_to_admin())
        await callback.answer()
        return

    msg = "\n<i>–ê–∫—Ç–∏–≤–Ω—ñ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</i>\n\n"

    for subscription in active_subscriptions:
        if subscription.user_id:
            msg += f"üÜî <b>ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b> <code>{subscription.user_id}</code>\n"

        msg += f"üìÖ <b>–ö—ñ–Ω–µ—Ü—å –¥–æ—Å—Ç—É–ø—É:</b> <code>{_normalize_date(subscription.access_to)}</code>\n"
        msg += f"‚è∞ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> <code>{_normalize_date(subscription.created_at)}</code>\n\n"

    await callback.message.edit_text(msg, reply_markup=admin_kb.back_to_admin())
    await callback.answer()


# @router.callback_query(F.data.startswith("admin:set_user_email_"))
# async def handle_set_user_email(callback: CallbackQuery, state: FSMContext) -> None:
#     user_id = int(callback.data.split("_")[-1])
#
#     await state.set_state(SetUserEmailState.email)
#     await state.update_data(user_id=user_id)
#
#     await callback.message.edit_text(
#         "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
#         "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª."
#     )
#
#     await callback.answer()
#
#
# @router.message(F.text, StateFilter(SetUserEmailState.email))
# async def input_set_user_email(message: Message, state: FSMContext) -> None:
#     data = await state.get_data()
#     user_id = data.get("user_id")
#
#     if message.text == "-":
#         await state.clear()
#         await message.answer("‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=admin_kb.back_to_admin_or_user(user_id))
#         return
#
#     try:
#         set_email = await set_user_email(user_id, message.text)
#         if set_email and set_email.email == message.text:
#             await message.answer(
#                 "‚úÖ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞.",
#                 reply_markup=admin_kb.back_to_admin_or_user(user_id)
#             )
#             await state.clear()
#             return
#
#     except Exception as e:
#         print(f"Error setting email for user {user_id}: {str(e)}")
#
#     await message.answer(
#         "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
#         reply_markup=admin_kb.back_to_admin_or_user(user_id)
#     )
#     await state.clear()


@router.callback_query(F.data.startswith("admin:grant_access_"))
async def handle_grant_access(callback: CallbackQuery, state: FSMContext) -> None:
    user_id = int(callback.data.split("_")[-1])

    await state.set_state(GrantSubscriptionState.access_to)
    await state.update_data(user_id=user_id)

    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É (—É –º—ñ—Å—è—Ü—è—Ö).\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª."
    )

    await callback.answer()


@router.message(F.text, StateFilter(GrantSubscriptionState.access_to))
async def input_grant_access(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    user_id = data.get("user_id")

    if message.text == "-":
        await state.clear()
        await message.answer("‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=admin_kb.back_to_admin_or_user(user_id))
        return

    try:
        months = int(message.text)
        if months <= 0:
            await message.answer(
                "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ –º—ñ—Å—è—Ü—ñ–≤.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –º—ñ—Å—è—Ü—ñ–≤.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
        )
        return

    try:
        order = await create_order(OrderCreateSchemaDB(
            user_id=user_id,
            amount=0.0,
            status=OrderStatus.COMPLETED.value
        ))

        access_from = datetime.now()
        access_to = access_from + timedelta(days=months * 30)

        subscription = await create_subscription(SubscriptionCreateSchemaDB(
            user_id=user_id,
            order_id=order.id,
            access_from=access_from,
            access_to=access_to,
            status=SubscriptionStatus.CREATED.value
        ))

        if subscription.user_id == user_id:
            await message.answer(
                f"‚úÖ –î–æ—Å—Ç—É–ø —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (ID {user_id}) –Ω–∞ {months} –º—ñ—Å—è—Ü—å(—ñ–≤).\n"
                f"üìÖ –î–æ—Å—Ç—É–ø –¥–æ: {_normalize_date(access_to)}",
                reply_markup=admin_kb.back_to_admin_or_user(user_id)
            )
            await state.clear()
            return

    except Exception as e:
        print(f"Error granting access to user {user_id}: {str(e)}")
        await message.answer(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=admin_kb.back_to_admin_or_user(user_id)
        )
        await state.clear()


@router.callback_query(F.data.startswith("admin:open_all_accesses_"))
async def open_all_accesses(callback: CallbackQuery) -> None:
    user_id = int(callback.data.split("_")[-1])

    try:
        opened = await open_subscriptions_access(user_id)
        message_text, reply_markup = _are_subscriptions_updated(opened, "open", user_id)
        await callback.message.edit_text(message_text, reply_markup=reply_markup)

    except Exception as e:
        print(f"Error opening access for user {user_id}: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –¥–æ—Å—Ç—É–ø—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}).",
            reply_markup=admin_kb.back_to_admin_or_user(user_id)
        )

    await callback.answer()


@router.callback_query(F.data.startswith("admin:close_all_accesses_"))
async def close_all_accesses(callback: CallbackQuery) -> None:
    user_id = int(callback.data.split("_")[-1])

    try:
        closed = await close_subscriptions_access(user_id)
        message_text, reply_markup = _are_subscriptions_updated(closed, "close", user_id)
        await callback.message.edit_text(message_text, reply_markup=reply_markup)

    except Exception as e:
        print(f"Error closing access for user {user_id}: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –¥–æ—Å—Ç—É–ø—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}).",
            reply_markup=admin_kb.back_to_admin_or_user(user_id)
        )

    await callback.answer()


@router.callback_query(F.data == "admin:courses")
async def manage_courses(callback: CallbackQuery) -> None:
    modules = await get_all_modules_with_lesson_count()

    if modules is None:
        modules = []

    if not modules:
        await callback.message.edit_text(
            "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤.", reply_markup=admin_kb.manage_courses_menu(modules)
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "–ê–∫—Ç–∏–≤–Ω—ñ –º–æ–¥—É–ª—ñ:\n",
        reply_markup=admin_kb.manage_courses_menu(modules)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:manage_course_"))
async def manage_course(callback: CallbackQuery) -> None:
    module_number = int(callback.data.split("_")[-1])

    lessons = await get_lessons_by_module(module_number)
    if not lessons:
        await callback.message.edit_text("–ù–µ–º–∞—î –º–æ–¥—É–ª—è –∑ —Ü–∏–º –Ω–æ–º–µ—Ä–æ–º.", reply_markup=admin_kb.back_to_admin())
        await callback.answer()
        return

    await callback.message.edit_text(
        f"–ê–∫—Ç–∏–≤–Ω—ñ —É—Ä–æ–∫–∏ –º–æ–¥—É–ª—è ‚Ññ{module_number}:",
        reply_markup=admin_kb.manage_course_menu(module_number, lessons)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:add_module_lesson_"))
async def add_module_lesson(callback: CallbackQuery, state: FSMContext) -> None:
    module_number = int(callback.data.split("_")[-1])

    lessons = await get_lessons_by_module(module_number)
    lesson_number = _find_next_available_lesson_number(lessons)

    await state.update_data(module_number=module_number, lesson_number=lesson_number)
    await state.set_state(CreateLessonState.title)

    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞:\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª."
    )
    await callback.answer()


@router.message(F.text, StateFilter(CreateLessonState.title))
async def add_module_lesson_title(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    module_number = data.get("module_number")

    if message.text == "-":
        await state.clear()
        await message.answer("‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=admin_kb.back_to_module(module_number))
        return

    await state.update_data(title=message.text)
    await state.set_state(CreateLessonState.video)

    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –∫—É—Ä—Å—É (—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å ¬´-¬ª).")


@router.message(F.content_type == ContentType.VIDEO, StateFilter(CreateLessonState.video))
async def add_module_lesson_video(message: Message, state: FSMContext) -> None:
    await state.update_data(video=message.video.file_id)
    await state.set_state(CreateLessonState.pdf)

    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF –¥–ª—è –∫—É—Ä—Å—É (—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å ¬´-¬ª).")


@router.message(F.text == "-", StateFilter(CreateLessonState.video))
async def skip_add_module_lesson_video(message: Message, state: FSMContext) -> None:
    await state.update_data(video=None)
    await state.set_state(CreateLessonState.pdf)

    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF –¥–ª—è –∫—É—Ä—Å—É (—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å ¬´-¬ª).")


@router.message(F.content_type == ContentType.DOCUMENT, StateFilter(CreateLessonState.pdf))
async def add_module_lesson_pdf(message: Message, state: FSMContext) -> None:
    await _process_create_module_lesson(message, state, message.document.file_id)


@router.message(F.text == "-", StateFilter(CreateLessonState.pdf))
async def skip_add_module_lesson_pdf(message: Message, state: FSMContext) -> None:
    await _process_create_module_lesson(message, state, None)


@router.callback_query(F.data.startswith("admin:manage_module_lesson_"))
async def manage_module_lesson(callback: CallbackQuery) -> None:
    parts = callback.data.split("_")

    module_number = int(parts[-2])
    lesson_number = int(parts[-1])

    lesson = await get_lesson_by_module_and_lesson_number(module_number, lesson_number)

    if not lesson:
        await callback.message.edit_text(
            f"‚ùå –£—Ä–æ–∫ ‚Ññ{lesson_number} —É –º–æ–¥—É–ª—ñ ‚Ññ{module_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=admin_kb.back_to_module(module_number)
        )
        await callback.answer()
        return

    msg = (
        f"üìñ –ú–æ–¥—É–ª—å ‚Ññ{module_number} - –£—Ä–æ–∫ ‚Ññ{lesson_number}\n\n"
        f"üìù –ù–∞–∑–≤–∞: {lesson.title}\n"
        f"üé• –í—ñ–¥–µ–æ: {'‚úÖ –Ñ' if lesson.video_file_id else '‚ùå –ù–µ–º–∞—î'}\n"
        f"üìÑ PDF: {'‚úÖ –Ñ' if lesson.pdf_file_id else '‚ùå –ù–µ–º–∞—î'}\n"
        f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {_normalize_date(lesson.created_at)}\n"
    )

    if not callback.message.text:
        await callback.message.answer(
            msg,
            reply_markup=admin_kb.manage_module_lesson_menu(module_number, lesson_number, lesson)
        )
    else:
        await callback.message.edit_text(
            msg,
            reply_markup=admin_kb.manage_module_lesson_menu(module_number, lesson_number, lesson)
        )

    await callback.answer()


@router.callback_query(F.data.startswith("admin:show_video_"))
async def show_lesson_video(callback: CallbackQuery) -> None:
    module_number, lesson_number = _get_module_lesson_number(callback)

    lesson = await get_lesson_by_module_and_lesson_number(module_number, lesson_number)

    if not lesson:
        await callback.message.edit_text(
            f"‚ùå –£—Ä–æ–∫ ‚Ññ{lesson_number} —É –º–æ–¥—É–ª—ñ ‚Ññ{module_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
        )
        await callback.answer()
        return

    await callback.message.edit_media(
        InputMediaVideo(media=lesson.video_file_id),
        reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:show_pdf_"))
async def show_lesson_pdf(callback: CallbackQuery) -> None:
    module_number, lesson_number = _get_module_lesson_number(callback)

    lesson = await get_lesson_by_module_and_lesson_number(module_number, lesson_number)

    if not lesson:
        await callback.message.edit_text(
            f"‚ùå –£—Ä–æ–∫ ‚Ññ{lesson_number} —É –º–æ–¥—É–ª—ñ ‚Ññ{module_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
        )
        await callback.answer()
        return

    await callback.message.edit_media(
        InputMediaDocument(media=lesson.pdf_file_id),
        reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:change_title_"))
async def update_lesson_title(callback: CallbackQuery, state: FSMContext) -> None:
    module_number, lesson_number = _get_module_lesson_number(callback)

    await state.update_data(module_number=module_number, lesson_number=lesson_number)
    await state.set_state(UpdateLessonTitle.title)

    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞:\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª."
    )
    await callback.answer()


@router.message(F.text, StateFilter(UpdateLessonTitle.title))
async def update_lesson_title_text(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    module_number = data.get("module_number")
    lesson_number = data.get("lesson_number")

    if message.text == "-":
        await state.clear()
        await message.answer(
            "‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
            reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
        )
        return

    await _process_update_module_lesson(
        message, state,
        update_type="title",
        new_value=message.text,
        success_message=f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{message.text}'."
    )


@router.callback_query(F.data.startswith("admin:change_video_"))
async def update_lesson_video(callback: CallbackQuery, state: FSMContext) -> None:
    module_number, lesson_number = _get_module_lesson_number(callback)

    await state.update_data(module_number=module_number, lesson_number=lesson_number)
    await state.set_state(UpdateLessonVideo.video)

    await callback.message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–µ–æ —É—Ä–æ–∫—É:\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª."
    )
    await callback.answer()


@router.message(F.content_type == ContentType.VIDEO, StateFilter(UpdateLessonVideo.video))
async def update_lesson_video_content(message: Message, state: FSMContext) -> None:
    await _process_update_module_lesson(
        message, state,
        update_type="video_file_id",
        new_value=message.video.file_id,
        success_message="‚úÖ –í—ñ–¥–µ–æ —É—Ä–æ–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ."
    )


@router.message(F.text == "-", StateFilter(UpdateLessonVideo.video))
async def cancel_update_lesson_video(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    module_number = data.get("module_number")
    lesson_number = data.get("lesson_number")

    await message.answer(
        "‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
        reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
    )
    await state.clear()


@router.callback_query(F.data.startswith("admin:change_pdf_"))
async def update_lesson_pdf(callback: CallbackQuery, state: FSMContext) -> None:
    module_number, lesson_number = _get_module_lesson_number(callback)

    await state.update_data(module_number=module_number, lesson_number=lesson_number)
    await state.set_state(UpdateLessonPDF.pdf)

    await callback.message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF —Ñ–∞–π–ª —É—Ä–æ–∫—É:\n"
        "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó –≤–≤–µ–¥—ñ—Ç—å ¬´-¬ª."
    )
    await callback.answer()


@router.message(F.content_type == ContentType.DOCUMENT, StateFilter(UpdateLessonPDF.pdf))
async def update_lesson_pdf_content(message: Message, state: FSMContext) -> None:
    pdf_name = message.document.file_name if message.document.file_name else "—Ñ–∞–π–ª"
    success_message = f"‚úÖ PDF —É—Ä–æ–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ({pdf_name})."

    await _process_update_module_lesson(
        message, state,
        update_type="pdf_file_id",
        new_value=message.document.file_id,
        success_message=success_message
    )


@router.message(F.text == "-", StateFilter(UpdateLessonPDF.pdf))
async def cancel_update_lesson_pdf(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    module_number = data.get("module_number")
    lesson_number = data.get("lesson_number")

    await message.answer(
        "‚ùå –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
        reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
    )
    await state.clear()


@router.callback_query(F.data.startswith("admin:ask_delete_lesson_"))
async def ask_delete_module_lesson(callback: CallbackQuery) -> None:
    module_number, lesson_number = _get_module_lesson_number(callback)

    await callback.message.edit_text(
        f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —É—Ä–æ–∫ {lesson_number} –º–æ–¥—É–ª—è {module_number}?",
        reply_markup=admin_kb.delete_module_lesson(module_number, lesson_number)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin:delete_lesson_"))
async def delete_module_lesson(callback: CallbackQuery) -> None:
    module_number, lesson_number = _get_module_lesson_number(callback)

    try:
        lesson = await get_lesson_by_module_and_lesson_number(module_number, lesson_number)

        if not lesson:
            await callback.message.edit_text(
                f"‚ùå –£—Ä–æ–∫ ‚Ññ{lesson_number} —É –º–æ–¥—É–ª—ñ ‚Ññ{module_number} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=admin_kb.back_to_module(module_number)
            )
            await callback.answer()
            return

        await delete_lesson(lesson.id)

        deleted = await get_lesson_by_id(lesson.id)

        if not deleted:
            await callback.message.edit_text(
                f"‚úÖ –£—Ä–æ–∫ {lesson_number} –º–æ–¥—É–ª—è {module_number} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.",
                reply_markup=admin_kb.back_to_module(module_number)
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —É—Ä–æ–∫ {lesson_number} –º–æ–¥—É–ª—è {module_number}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=admin_kb.back_to_module(module_number)
            )

    except Exception as e:
        print(f"Error deleting lesson {lesson_number} in module {module_number}: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—Ä–æ–∫–∞ {lesson_number} –º–æ–¥—É–ª—è {module_number}. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=admin_kb.back_to_module(module_number)
        )

    await callback.answer()


@router.callback_query(F.data == "admin:back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=admin_kb.menu())
    await callback.answer()


def _are_subscriptions_updated(subscriptions: List[SubscriptionReadSchemaDB], action: str, user_id: int
                               ) -> Tuple[str, InlineKeyboardMarkup]:
    messages = {
        "open": {
            "success": f"‚úÖ –í—Å—ñ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}) —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ.",
            "warn": f"‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}). –î–µ—è–∫—ñ –¥–æ—Å—Ç—É–ø–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏.",
            "error": f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id})."
        },
        "close": {
            "success": f"‚úÖ –í—Å—ñ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}) —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–æ.",
            "warn": f"‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –∑–∞–∫—Ä–∏—Ç–æ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id}). –î–µ—è–∫—ñ –¥–æ—Å—Ç—É–ø–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏.",
            "error": f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID {user_id})."
        }
    }

    if not subscriptions:
        return messages[action]["error"], admin_kb.back_to_admin()

    expected_status = SubscriptionStatus.ACTIVE.value if action == "open" else SubscriptionStatus.CANCELED.value
    success_count = sum(1 for sub in subscriptions if sub.status == expected_status)
    total_count = len(subscriptions)

    if success_count == total_count:
        return messages[action]["success"], admin_kb.back_to_admin_or_user(user_id)
    elif success_count > 0:
        return messages[action]["warn"], admin_kb.back_to_admin_or_user(user_id)
    else:
        return messages[action]["error"], admin_kb.back_to_admin_or_user(user_id)


async def _process_create_module_lesson(message: Message, state: FSMContext, pdf_file_id: str | None) -> None:
    data = await state.get_data()

    module_number = data.get("module_number")
    lesson_number = data.get("lesson_number")

    title = data.get("title")
    video_file_id = data.get("video")

    try:
        lesson = await create_lesson(LessonCreateSchemaDB(
            module_number=module_number,
            lesson_number=lesson_number,
            title=title,
            video_file_id=video_file_id,
            pdf_file_id=pdf_file_id
        ))

        video_status = "‚úÖ –î–æ–¥–∞–Ω–æ" if video_file_id else "‚ùå –ù–µ –¥–æ–¥–∞–Ω–æ"
        pdf_status = "‚ùå –ù–µ –¥–æ–¥–∞–Ω–æ"

        if pdf_file_id and hasattr(message, "document") and message.document:
            pdf_status = f"‚úÖ –î–æ–¥–∞–Ω–æ ({message.document.file_name})"
        elif pdf_file_id:
            pdf_status = "‚úÖ –î–æ–¥–∞–Ω–æ"

        if lesson.title == title:
            await message.answer(
                f"‚úÖ –£—Ä–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
                f"üìñ –ú–æ–¥—É–ª—å: {module_number}\n"
                f"üìù –£—Ä–æ–∫: ‚Ññ{lesson_number} - {title}\n"
                f"üé• –í—ñ–¥–µ–æ: {video_status}\n"
                f"üìÑ PDF: {pdf_status}\n",
                reply_markup=admin_kb.back_to_module(module_number)
            )
            await state.clear()
            return

    except Exception as e:
        print(f"Error creating lesson for module {module_number}: {str(e)}")
        await message.answer(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=admin_kb.back_to_module(module_number)
        )
        await state.clear()


async def _process_update_module_lesson(
        message: Message, state: FSMContext,
        update_type: str, new_value: str,
        success_message: str
) -> None:
    data = await state.get_data()

    module_number = data.get("module_number")
    lesson_number = data.get("lesson_number")

    try:
        update_data = {
            "module_no": module_number,
            "lesson_no": lesson_number,
            update_type: new_value
        }

        updated = await update_lesson(LessonUpdateSchemaDB(**update_data))

        if updated:
            updated_field_value = getattr(updated, update_type, None)
            if updated_field_value == new_value:
                await message.answer(
                    success_message,
                    reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
                )
                await state.clear()
                return

        raise Exception("Update verification failed")

    except Exception as e:
        print(f"Error updating {update_type} for lesson {lesson_number} in module {module_number}: {str(e)}")

        error_messages = {
            "title": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏ —É—Ä–æ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            "video_file_id": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            "pdf_file_id": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è PDF. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        }

        error_message = error_messages.get(update_type, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Ä–æ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

        await message.answer(
            error_message,
            reply_markup=admin_kb.back_to_lesson(module_number, lesson_number)
        )
        await state.clear()


def _find_next_available_lesson_number(lessons: List[LessonReadSchemaDB]) -> int:
    if not lessons:
        return 1

    lesson_numbers = sorted([lesson.lesson_number for lesson in lessons])

    for i, lesson_number in enumerate(lesson_numbers, start=1):
        if lesson_number != i:
            return i

    return max(lesson_numbers) + 1


def _normalize_date(date: datetime) -> str:
    if date is None:
        return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    return date.strftime('%d.%m.%Y %H:%M:%S')


def _get_module_lesson_number(callback: CallbackQuery) -> Tuple[int, int]:
    parts = callback.data.split("_")
    return int(parts[-2]), int(parts[-1])
